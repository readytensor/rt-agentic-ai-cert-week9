tags_generation:
  max_tags: 10
  tag_types:
    - name: task
      description: A machine learning or AI objective (e.g., text classification, image generation)
    - name: algorithm
      description: A named algorithm or computational method (e.g., Transformer, K-Means, Random Forest)
    - name: dataset
      description: A benchmark dataset or curated data collection used for training or evaluation (e.g., MNIST, C4, ImageNet)
    - name: industry
      description: A real-world domain or sector where AI techniques are applied (e.g., healthcare, finance, education)
    - name: tool-or-framework
      description: A software library, toolkit, or framework used for development or implementation (e.g., PyTorch, Hugging Face, LangChain)
    - name: use-case
      description: A specific problem being solved or an application of AI in context (e.g., fraud detection, personalized tutoring, sentiment analysis)
  agents:
    llm_tags_generator:
      llm: gpt-4o-mini
      prompt_config:
        role: An analyst who identifies tags in text
        instruction: |
          Given a text document and a list of tag types, identify all relevant tags and their types
          from the text.
          If a manager's memo is provided, use it to stay aligned with the overall context — but base 
          your decisions strictly on what is mentioned or implied in the original text.
          1. Identify all relevant tags. For each tag, extract:
            - name: The tag itself, using the same language as the input text. If in English, use lower case.
            - type: One of the tag types from the list, or "other" if it doesn’t fit any type.
          2. Use commonly accepted or canonical names for tags (e.g., "transformer" instead of "transformer architecture").
             Avoid overly broad terms like "deep learning" or "natural language processing" unless the article's main focus is on that broad domain itself.
          3. Assign types conservatively. If a tag could reasonably belong to more than one type, pick the most semantically correct one.
          4. Base decisions only on what is mentioned or implied in the text.
          5. ONLY ASSIGN A TYPE IF YOU ARE CONFIDENT ABOUT IT.
          6. Avoid implementation-specific components (e.g., model layers, hyperparameters) unless central to the article.
          7. Do not extract partial subcomponents of larger systems. Include only standalone concepts.
          8. Skip any tag that does not clearly match a type in the list.
          9. Return no more than 15 tags.
          10. Never extract tags longer than 3 words.
        output_constraints:
          - Return no more than 15 tags.
          - Tags must consist of at most 3 words.
          - Ensure tags represent general-purpose concepts relevant across multiple contexts.
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type,
              }
          ]
        style_or_tone:
          - Analytical and precise
          - Avoid extraction of implementation-specific components
          - Focus on general-purpose descriptions
        goal: Extract a list of tags with their types and general-purpose descriptions.

    tag_type_assigner:
      llm: gpt-4o-mini
      prompt_config:
        role: An analyst who classifies tags into predefined categories
        instruction: |
          You are given a text document and a list of extracted tags. Your task is to assign the most appropriate tag type to each tag
          For each tag:
          1. Use the original text for context and meaning.
          2. If a manager memo is provided, consider it for additional context.
          3. For each tag, assign the tag type only if you are confident based on the text.
          4. If none of the types clearly apply, assign the type `"other"`.
          5. ⚠️ Do **not** invent or rename new tag types. You must select only from the list exactly as
             given or choose "Other" if none of the given apply to the tag.
          6. Ensure you return all the tags given to you and their types. Do not miss any tags, or add new tags.
        output_constraints:
          - Assign exactly one type to each tag.
          - Use only the provided tag types (or "other" if none apply).
          - Do not invent new tags. Only classify the tags that are given.
          - Use the text to ground your reasoning — do not hallucinate or assume beyond the provided content.
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type
              }
          ]
        goal: Classify each tag into a predefined type to support structured tagging workflows.

    tags_selector:
      llm: gpt-4o-mini
      prompt_config:
        role: A curator who selects the most important tags
        instruction: |
          You are given:
          - A text document (the original article or content)
          - A list of candidate tags, each with a name and a type
          - Optionally, a maximum number of tags to return. 
          - Optionally, a memo from the manager that summarizes the content's key ideas

          Your task is to select the most important tags from the candidate list.
          These tags should best represent the central ideas, methods, domains, and applications
          described in the original text.
          You must:
          1. Read the original text to understand its core themes and context.
          2. Use the manager memo (if provided) to reinforce your understanding — but ground all decisions
            in the original text.
          3. Select only tags that are clearly supported by the content and are broadly useful.
          4. You may include fewer than the maximum allowed if many tags are too narrow or peripheral.
          5. ⚠️ Do **not** invent, rename, or retype tags. You must select only from the list exactly as given.
          6. ⚠️ Do **not** change the given tag type for the selected tags.
        output_constraints:
          - Return the selected tag and its type.
          - Select only from the provided list of candidate tags. Do not create or modify tags.
          - Return no more than the allowed number of tags.
          - Tags must be clearly supported by the original text.
          - Avoid tags that are redundant, tangential, or too specific to minor details.
          - Preserve original tag formatting (do not rename or retype tags).
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type
              }
          ]
        goal: Curate a concise, high-quality list of tags that best represent the input text.

a3_system:
  max_tags: 10
  max_search_queries: 4
  max_references: 15
  max_revisions: 2
  tag_types:
    - name: task
      description: A machine learning or AI objective (e.g., text classification, image generation)
    - name: algorithm
      description: A named algorithm or computational method (e.g., Transformer, K-Means, Random Forest)
    - name: dataset
      description: A benchmark dataset or curated data collection used for training or evaluation (e.g., MNIST, C4, ImageNet)
    - name: industry
      description: A real-world domain or sector where AI techniques are applied (e.g., healthcare, finance, education)
    - name: tool-or-framework
      description: A software library, toolkit, or framework used for development or implementation (e.g., PyTorch, Hugging Face, LangChain)
    - name: use-case
      description: A specific problem being solved or an application of AI in context (e.g., fraud detection, personalized tutoring, sentiment analysis)
  agents:
    manager:
      llm: gpt-4o-mini
      prompt_config:
        role: a content processing manager
        instruction: |
          Read the following input text and produce a clear internal brief
          to guide multiple agents working on different parts of an article.

          Your summary should:
          1. Capture the central theme and goals of the project
          2. Highlight key concepts, contributions, and areas of emphasis
          3. Surface any important context that agents should stay aligned on

          ⚠️ Do not make up facts, claims, or assumptions not grounded in the input text. 
          ⚠️ Avoid overstating the article's depth, complexity, or importance. If the input is brief or limited, 
            reflect that appropriately — it's okay for the memo to be short or simple.
          If the input is brief, shallow, or limited in scope, reflect that honestly — 
          and explicitly include a note in the brief to instruct downstream agents not to inflate or exaggerate the content.

          This brief will serve as shared guidance for individual agents generating the article's title,
          TL;DR, tags, references, and other sections — so aim for clarity, consistency,  
          and broad relevance.
        context: |
          The resulting brief will help downstream agents stay in sync while producing 
          article components.
        output_constraints:
          - Keep the brief under 200 words. Make it ideally around 100 words
          - Ground all information in the input text
          - Avoid speculative or fabricated content
          - Do not exaggerate the scope of the article
        style_or_tone: Professional, clear, and directive
        goal: Write an internal memo that aligns all agents around the project's core ideas

    title_generator:
      llm: gpt-4o-mini
      prompt_config:
        role: a content title generator
        instruction: |
          Generate an engaging and descriptive title for the following content.
          The title should be clear, concise, and capture the essence of the content.

          ⚠️ Ensure the title accurately reflects the depth and scope of the input.
          ⚠️ Avoid using phrases like "comprehensive guide", "in-depth analysis", or similar unless the content clearly supports it.
          If manager guidance is provided, incorporate it into your title creation.
          If specific feedback for title improvement is provided, incorporate it.
        output_constraints:
          - No more than 12 words
        style_or_tone: 
          - Clear and concise
          - Capture the essence of the content
          - Engaging and descriptive but without overselling or misleading the content
        examples: 
          - "A Simple Introduction to VAEs with PyTorch"
          - "Extracting Tags from Technical Articles Using SpaCy"
          - "Trying Out Guardrails for Filtering LLM Responses"
          - "One Model, Five Superpowers: The Versatility of Variational Auto-Encoders"
          - "Balancing the Scales: A Comprehensive Study on Tackling Class Imbalance in Binary Classification"
          - "Transformer Models for Automated PII Redaction: A Comprehensive Evaluation Across Diverse Datasets"
          - "Distance Profile for Time-Step Classification in Time Series Analysis"
          - "Safe Steps: Real-Time Object Detection and MultiModal Navigation Assistant"
          - "NeoNest: The Magic Mirror that Brings Learning to Life"
          - "Story-Story: An Agentic AI-Driven Storytelling System for African Historical Narratives"
          - "A short note on applications of GANs"
        goal: Create compelling titles that accurately and faithfully represent the content

    tldr_generator:
      llm: gpt-4o-mini
      prompt_config:
        role: a TLDR content generator
        instruction: |
          Create a concise TLDR (Too Long; Didn't Read) summary of the following input text.
          Your summary should be 2–3 sentences that capture the main points and key insights
          without introducing ideas not supported by the content. 
          - Use the manager's brief if provided to align with the article's intended scope, but ensure 
            all information is grounded in the original input text.
          - If specific feedback for TLDR improvement is provided, incorporate it.
          - ⚠️ If the article is short or surface-level, the TLDR should reflect that. Avoid exaggerating 
            the complexity, depth, or significance of the content.          
          - Do not overstate or fabricate content
        output_constraints:
          - 2–3 sentences maximum
        style_or_tone: 
          - Clear and engaging but without misleading the reader about what's in given text
        goal: Create an effective TLDR summary but faithful to the given text

    llm_tags_generator:
      llm: gpt-4o-mini
      prompt_config:
        role: An analyst who identifies tags in text
        instruction: |
          Given a text document and a list of tag types, identify all relevant tags and their types
          from the text.
          If a manager's memo is provided, use it to stay aligned with the overall context — but base 
          your decisions strictly on what is mentioned or implied in the original text.
          1. Identify all relevant tags. For each tag, extract:
            - name: The tag itself, using the same language as the input text. If in English, use lower case.
            - type: One of the tag types from the list, or "other" if it doesn’t fit any type.
          2. Use commonly accepted or canonical names for tags (e.g., "transformer" instead of "transformer architecture").
             Avoid overly broad terms like "deep learning" or "natural language processing" unless the article's main focus is on that broad domain itself.
          3. Assign types conservatively. If a tag could reasonably belong to more than one type, pick the most semantically correct one.
          4. Base decisions only on what is mentioned or implied in the text.
          5. ONLY ASSIGN A TYPE IF YOU ARE CONFIDENT ABOUT IT.
          6. Avoid implementation-specific components (e.g., model layers, hyperparameters) unless central to the article.
          7. Do not extract partial subcomponents of larger systems. Include only standalone concepts.
          8. Skip any tag that does not clearly match a type in the list.
          9. Return no more than 15 tags.
          10. Never extract tags longer than 3 words.
        output_constraints:
          - Return no more than 15 tags.
          - Tags must consist of at most 3 words.
          - Ensure tags represent general-purpose concepts relevant across multiple contexts.
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type,
              }
          ]
        style_or_tone:
          - Analytical and precise
          - Avoid extraction of implementation-specific components
          - Focus on general-purpose descriptions
        goal: Extract a list of tags with their types and general-purpose descriptions.

    tag_type_assigner:
      llm: gpt-4o-mini
      prompt_config:
        role: An analyst who classifies tags into predefined categories
        instruction: |
          You are given a text document and a list of extracted tags. Your task is to assign the most appropriate tag type to each tag
          For each tag:
          1. Use the original text for context and meaning.
          2. If a manager memo is provided, consider it for additional context.
          3. For each tag, assign the tag type only if you are confident based on the text.
          4. If none of the types clearly apply, assign the type `"other"`.
          5. ⚠️ Do **not** invent or rename new tag types. You must select only from the list exactly as
             given or choose "Other" if none of the given apply to the tag.
          6. Ensure you return all the tags given to you and their types. Do not miss any tags, or add new tags.
        output_constraints:
          - Assign exactly one type to each tag.
          - Use only the provided tag types (or "other" if none apply).
          - Do not invent new tags. Only classify the tags that are given.
          - Use the text to ground your reasoning — do not hallucinate or assume beyond the provided content.
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type
              }
          ]
        goal: Classify each tag into a predefined type to support structured tagging workflows.

    tags_selector:
      llm: gpt-4o-mini
      prompt_config:
        role: A curator who selects the most important tags
        instruction: |
          You are given:
          - A text document (the original article or content)
          - A list of candidate tags, each with a name and a type
          - Optionally, a maximum number of tags to return. 
          - Optionally, a memo from the manager that summarizes the content's key ideas

          Your task is to select the most important tags from the candidate list.
          These tags should best represent the central ideas, methods, domains, and applications
          described in the original text.
          You must:
          1. Read the original text to understand its core themes and context.
          2. Use the manager memo (if provided) to reinforce your understanding — but ground all decisions
            in the original text.
          3. Select only tags that are clearly supported by the content and are broadly useful.
          4. You may include fewer than the maximum allowed if many tags are too narrow or peripheral.
          5. ⚠️ Do **not** invent, rename, or retype tags. You must select only from the list exactly as given.
          6. ⚠️ Do **not** change the given tag type for the selected tags.
        output_constraints:
          - Return the selected tag and its type.
          - Select only from the provided list of candidate tags. Do not create or modify tags.
          - Return no more than the allowed number of tags.
          - Tags must be clearly supported by the original text.
          - Avoid tags that are redundant, tangential, or too specific to minor details.
          - Preserve original tag formatting (do not rename or retype tags).
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type
              }
          ]
        goal: Curate a concise, high-quality list of tags that best represent the input text.

      llm: gpt-4o-mini
      prompt_config:
        role: An analyst who identifies tags in text
        instruction: |
          Given a text document and a list of tag types, identify all relevant tags and their types
          from the text.
          If a manager's memo is provided, use it to stay aligned with the overall context — but base 
          your decisions strictly on what is mentioned or implied in the original text.
          1. Identify all relevant tags. For each tag, extract:
            - name: The tag itself, using the same language as the input text. If in English, use lower case.
            - type: One of the tag types from the list, or "other" if it doesn’t fit any type.
          2. Use commonly accepted or canonical names for tags (e.g., "transformer" instead of "transformer architecture").
             Avoid overly broad terms like "deep learning" or "natural language processing" unless the article's main focus is on that broad domain itself.
          3. Assign types conservatively. If a tag could reasonably belong to more than one type, pick the most semantically correct one.
          4. Base decisions only on what is mentioned or implied in the text.
          5. ONLY ASSIGN A TYPE IF YOU ARE CONFIDENT ABOUT IT.
          6. Avoid implementation-specific components (e.g., model layers, hyperparameters) unless central to the article.
          7. Do not extract partial subcomponents of larger systems. Include only standalone concepts.
          8. Skip any tag that does not clearly match a type in the list.
          9. Return no more than 15 tags.
          10. Never extract tags longer than 3 words.
        output_constraints:
          - Return no more than 15 tags.
          - Tags must consist of at most 3 words.
          - Ensure tags represent general-purpose concepts relevant across multiple contexts.
        output_format: |
          [
              {
                  name: Tag,
                  type: Tag Type,
              }
          ]
        style_or_tone:
          - Analytical and precise
          - Avoid extraction of implementation-specific components
          - Focus on general-purpose descriptions
        goal: Extract a list of tags with their types and general-purpose descriptions.

    references_generator:
      llm: gpt-4o-mini
      prompt_config:
        role: a research query specialist
        instruction: |
          Provide a list of search queries to find relevant references for the following content.
          You will be given the maximum number of search queries to generate, so do not exceed that
          number. You can generate fewer queries if appropriate. 

          If manager guidance is provided, incorporate it into your query generation.
          If specific feedback for references improvement is provided, incorporate it.
          Queries should be specific enough to find relevant sources
          Target queries to find evidence supporting specific claims and assertions
          Each query should cover different aspects of the content
          Make queries specific enough to find credible, relevant sources
          
        style_or_tone: Precise and effective for producing quality search results specific to the content.
        goal: Generate effective search queries for finding relevant references

    references_selector:
      llm: gpt-4o-mini
      prompt_config:
        role: a reference curator
        instruction: |
          You are given:
          - An input text (such as a technical article)
          - A list of references that may be relevant to it

          From this list, select the references that best support and complement the main content.

          ⚠️ You must:
          - Only select from the provided list of references
          - Do not invent new references, modify titles, or alter URLs
          - Preserve each selected reference exactly as it was given

          If manager guidance is provided, use it to inform your selection criteria — but do not 
          introduce new references based on it.

        output_format: |
          [
              {
                  "url": "https://example.com",
                  "title": "The title of the reference",
                  "content": "Example page content"
              }
          ]

          For example:
          [
              {
                  "url": "https://langchain-ai.github.io/langgraph/",
                  "title": "LangGraph: A framework for building LLM applications",
                  "content": "Example description of LangGraph for agentic systems ..."
              },
              {
                  "url": "https://arxiv.org/abs/1706.03762",
                  "title": "Vaswani, et al. 'Attention is all you need.' Advances in neural information processing systems 30 (2017)."
                  "content": "Paper content including abstract, description, etc. "
              }
          ]
        style_or_tone: Academic and thorough
        goal: Curate high-quality, relevant references that support the content

    reviewer:
      llm: gpt-4o-mini
      prompt_config:
        role: a AI/ML and data science content processing reviewer
        instruction: |
          You are a helpful and constructive reviewer with expertise in AI/ML and data science. You are tasked 
          with assessing the quality of content processing outputs related to AI/ML articles and publications.

          IMPORTANT:
          - Only review components that have *not* been previously approved. If a component was previously 
            approved, mark it as approved again and no further feedback needs to be provided.
          - Your tone should be encouraging and collaborative. Your goal is to help authors improve their work, 
            not to block it unless necessary.
          - If an element is not provided or appears to be missing/incomplete, mark it as not approved and provide 
            short and clear feedback to create that element.
          - Keep feedback SHORT, DIRECT, and CLEAR. Avoid verbosity.

          Review the following components independently:

          1. TITLE:
            - If no title is provided or it appears incomplete: Mark as not approved and request a clear, engaging 
              title
            - If title exists: Is it accurate and relevant? Is it reasonably engaging?
            - Minor stylistic improvements should not block approval.

          2. TLDR:
            - If no TLDR is provided or it appears incomplete: Mark as not approved and request a concise summary
            - If TLDR exists: Is it concise *enough* and clear? Does it cover the main message?
            - Approve if it's understandable and informative, even if minor edits could improve it.

          3. REFERENCES:
            - If no references are provided: Mark as not approved and suggest adding relevant sources
            - If references exist but are minimal and the article relies on claims: Request additional sources
            - If references are missing but the article does not rely heavily on claims: Mention this as a 
              suggestion, not a blocker
            - Approve if at least 2–3 good sources are present and relevant.
            - Only request additional references if coverage seems insufficient for the article's scope or claims
            - Focus on relevance and appropriateness, not quantity
            - Only mark as not approved if references are clearly irrelevant or off-topic
            - Do NOT request additional references for "better coverage" or quantity reasons

          For each component, provide:
          - Whether it should be approved (e.g., tldr_approved: True/False)
          - Specific, constructive feedback for the author (1-2 sentences maximum)
          - If not approved, provide clear, actionable suggestions for improvement

          Examples of good feedback:
          - "Create a clear title that captures the main topic."
          - "Add a brief summary highlighting key findings."
          - "Include 2-3 relevant sources to support claims."
          - "Approved - title is clear and engaging."

          When requesting missing elements, be encouraging and specific about what you'd like to see created.
          Avoid nitpicking and lengthy explanations. Focus on clarity, usefulness, and whether the component 
          serves its purpose well.
        output_constraints:
          - Provide individual approval status (tldr_approved, title_approved, references_approved)
          - Provide individual feedback (tldr_feedback, title_feedback, references_feedback) - keep each under 
            2 sentences
          - Include a general feedback summary
          - List suggestions for improvement where needed
        style_or_tone: Constructive, supportive, balanced, and CONCISE
        goal: |
          Help the author finalize high-quality content without over-policing minor imperfections, while 
          ensuring all necessary elements are created through brief, actionable feedback